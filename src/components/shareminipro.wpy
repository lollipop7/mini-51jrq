<style lang="scss">
    .share-container {
        position: fixed;
        bottom: 150rpx;
        right: 16rpx;
        .share-btn {
            width: 96rpx;
            height: 96rpx;
            &:after {
                border: none;
            }
        }
    }
    .sheet-list {
        action-sheet-item {
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: space-around;
            padding: 10px;
            .sheet-item {
                display: flex;
                flex-direction: column;
                align-items: center;
                font-size: 24rpx;
                color: #656565;
                &.sheet-btn:after {
                    border: none;
                }
                &.sheet-btn {
                    padding-left: 0;
                    padding-right: 0;
                    margin-left: 0;
                    margin-right: 0;
                    background-color: #fff;
                    line-height: inherit;
                }
            }
            .share-icon {
                width: 100rpx;
                height: 100rpx;
            }
        }
        action-sheet-cancel {
            font-size: 36rpx;
            color: #f16049;
        }
    }
    .bomb-screen {
        background-color: rgb(0, 0, 0);
        position: fixed;
        z-index: 2000;
        bottom: 0;
        right: 0;
        left: 0;
        top: 0;
    }
    .pop-pic {
        position: fixed;
        width: 100%;
        height: 85%;
        z-index: 2001;
        padding: 24rpx;
        text-align: center;
        background-color: #fff;
    }
</style>

<template>
    <view>
        <view class="share-container">
            <button class="share-btn" @tap.stop="openActionSheet"
                style="background: url('/images/icons/share.png') no-repeat center center;background-size: contain"></button>
        </view>
        <action-sheet hidden="{{actionSheetHidden}}" bindchange="actionSheetbindchange" class="sheet-list">
            <action-sheet-item>
                <button class="sheet-btn sheet-item" open-type="share" @tap.stop="bindMenu0">
                    <image src="/images/icons/friend-icon.png" class="share-icon"></image>
                    <text open-type="share">转发给好友或群聊</text>
                </button>
                <view class="sheet-item" @tap.stop="bindMenu1">
                    <image src="/images/icons/moments-icon.png" class="share-icon"></image>
                    <text>生成朋友圈分享图</text>
                </view>
            </action-sheet-item>
            <action-sheet-cancel>取消</action-sheet-cancel> 
        </action-sheet>
        <view wx:if="{{isShowBombScreen}}">
            <view class="pop-pic">
                <!-- <posinameduty :syncJobInfo.sync="jobInfo"></posinameduty> -->

                <canvas canvas-id="myCanvas" 

                    style="border: 1px solid;"/>
                <!-- <image src="{{wxacodeBase64}}"></image> -->
            </view>
            <view class="bomb-screen" @tap.stop="close"></view>
        </view>
    </view>
</template>

<script>
import wepy from 'wepy';
import api from '../api/api';
import PosiNameDuty from './posinameduty';
import {
    strEnc
} from '../utils/des';
import {
    DESKEY
} from '../utils/constants';

export default class ShareMiniPro extends wepy.component {
    data = {
        actionSheetHidden: true,
        sheetList: [
            {bindtap: "Menu0", txt: "转发给好友或群聊"},
            {bindtap: "Menu1", txt: "生成朋友圈分享图"},
            // {bindtap: "Menu2", txt: "生成公众号文章分享图"},
        ],
        isShowBombScreen: false,
        wxacodeBase64: ''
    }

    props={
        urlWithArgs: {
            type: String,
            default: 'null'
        },
        jobInfo: {
            type: Object,
            default: null
        }
    }

    components = {
        posinameduty: PosiNameDuty,
    }

    onLoad() {
        this.setDesKey()
    }

    methods={
        openActionSheet() {
            this.actionSheetHidden = !this.actionSheetHidden;
        },
        actionSheetbindchange() {//调取 “取消”按钮
            this.actionSheetHidden = !this.actionSheetHidden;
        },
        bindMenu0(){//转发给好友或群聊
            this.menu = 1;
            this.actionSheetHidden = !this.actionSheetHidden;
        },
        bindMenu1(){//生成朋友圈分享图
            this.menu = 0;
            this.actionSheetHidden = !this.actionSheetHidden;
            // this.isShowBombScreen = true;             
            // this.getWxaCode();
        },
        close() {
            this.isShowBombScreen = false;
            console.log('关闭遮罩')
        }
    }

    setDesKey(){
        //设置请求参数
        const query = "name=luwd&value=luwanding";
        let deskey = strEnc("name=luwd&value=luwanding",DESKEY);
        console.log(deskey)
    }
    
    async getWxaCode() {//获取小程序码
        const that = this;
        const json = await api.getWxaCode({
          query: {
             head: {
                transcode: "P00016",
                type: "h"
            },
            data: {
              path: that.urlWithArgs,
              width: 430
            }
          }
        });
        if(json.errMsg == "request:ok") {
            let blob = new Blob([json.data]);//读取二进制流
            let reader = new FileReader();
            reader.readAsArrayBuffer(blob);   
            let base64 = reader.onload = function(e) {
                //查看文件输出内容
                console.log(this.result);
                //查看文件内容字节大小
                // console.log(new Blob([this.result]));
                that.wxacodeBase64 = 'data:image/jpeg;base64,' + wx.arrayBufferToBase64(this.result);
                that.$apply();
            }
        //   wx.getImageInfo({
        //     src: `data:image/png;base64,${base64}`,
        //     success: function(res){
        //       console.log(res);
        //     }
        //   })
        }
    }

    generateShareImage(jobInfo) {
        const ctx = wx.createCanvasContext('myCanvas')
        const {
            jobname, avatarUrl
        } = jobInfo
        const {
            nickName, count, wishesContent
        } = this.data
        const CANVAS_W = 300
        const CANVAS_H = 375
            // draw background
        ctx.drawImage(bgWishes, 0, 0, CANVAS_W, CANVAS_H)
            // draw wishes content
        const getWishBlocks = (content = '') => {
            let result = []
            if (typeof content === 'string') {
            // 将文字简单分行，每十六个字符为一行
            const COUNT_PER_BLOCK = 16
            for (let offset = 0, l = content.length; offset < l;) {
                let start = offset
                let end = offset + COUNT_PER_BLOCK
                let block = content.substring(start, end)
                result.push(block)
                offset += COUNT_PER_BLOCK
            }
            }
            return result
        }
        const WISHES_X = CANVAS_W / 2
        const WISHES_Y = 90
        const WISHES_LIGHT_HEIGHT = 21
        ctx.setTextAlign('center')
        ctx.setFontSize(15)
        let wishesContentBlocks = getWishBlocks(wishesContent)
        for (let i = 0, l = wishesContentBlocks.length; i < l; i++) {
            let x = WISHES_X
            let y = WISHES_Y + WISHES_LIGHT_HEIGHT * i
            ctx.fillText(wishesContentBlocks[i], x, y)
        }
        // draw userInfo
        //draw avatar
        const AVATAR_X = CANVAS_W - 5 - 53
        const AVATAR_Y = CANVAS_H - 104 - 15
        const AVATAR_SIZE = 53
        ctx.drawImage(avatarUrl, AVATAR_X, AVATAR_Y, 53, 53)
            // draw avatar border
            // draw nickname
        const NICKNAME_X = CANVAS_W - 5
        const NICKNAME_Y = CANVAS_H - 20 - 5 - 15
        ctx.setTextAlign('right')
        ctx.setFontSize(15)
        ctx.fillText(nickName, NICKNAME_X, NICKNAME_Y)
            // draw wishes count
        const COUNT_X = NICKNAME_X
        const COUNT_Y = CANVAS_H - 15
        ctx.setTextAlign('right')
        ctx.setFontSize(13)
        ctx.fillText(`第${count}位送出祝福`, COUNT_X, COUNT_Y)
        ctx.draw()
        return ctx
    }
}
</script>


